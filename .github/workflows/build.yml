name: Build and publish Go module

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.25"

      - name: Cache Go modules & tools
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
            ~/go/bin
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Test
        run: |
          export PATH=$(go env GOPATH)/bin:$PATH
          go install gotest.tools/gotestsum@latest
          mkdir -p ./test-reports/
          gotestsum --junitfile=./test-reports/junit.xml --format github-actions -- -v -coverprofile=profile.cov -coverpkg=./... ./...

      - name: Collect test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: ./test-reports/

      - name: Publish test results
        uses: mikepenz/action-junit-report@v5
        if: always()
        with:
          report_paths: "./test-reports/junit.xml"
          comment: true
          include_passed: true
          detailed_summary: true

      - name: Upload coverage to Coveralls
        uses: shogo82148/actions-goveralls@v1
        continue-on-error: true
        with:
          path-to-profile: profile.cov

      - name: Lint
        uses: golangci/golangci-lint-action@v8

  publish:
    name: "Publish Go Module"
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' && !startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: "1.25"

      - name: Get latest version tag
        id: get_version
        run: |
          # Use `git describe` to find the latest tag and determine the next version
          LATEST_TAG=$(git describe --tags --abbrev=0)
          if [ -z "$LATEST_TAG" ]; then
            echo "Latest tag not found, starting with v0.1.0"
            NEXT_VERSION="v0.1.0"
          else
            # Increment the patch version (e.g., v1.2.3 -> v1.2.4)
            # This uses sed to find and increment the last number in the tag
            NEXT_VERSION=$(echo $LATEST_TAG | sed -E 's/([0-9]+)$/expr & + 1/e')
          fi
          echo "Next version: $NEXT_VERSION"
          echo "next_version=$NEXT_VERSION" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ steps.get_version.outputs.next_version }}
          git push origin ${{ steps.get_version.outputs.next_version }}
